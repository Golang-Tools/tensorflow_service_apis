// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.11.4
// source: tensorflow/core/profiler/tfprof_log.proto

package profiler

import (
	framework "Golang-Tools/tensorflow_service_apis/tensorflow/tensorflow/core/framework"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// It specifies the Python callstack that creates an op.
type CodeDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Traces []*CodeDef_Trace `protobuf:"bytes,1,rep,name=traces,proto3" json:"traces,omitempty"`
}

func (x *CodeDef) Reset() {
	*x = CodeDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeDef) ProtoMessage() {}

func (x *CodeDef) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeDef.ProtoReflect.Descriptor instead.
func (*CodeDef) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_log_proto_rawDescGZIP(), []int{0}
}

func (x *CodeDef) GetTraces() []*CodeDef_Trace {
	if x != nil {
		return x.Traces
	}
	return nil
}

type OpLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// op name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// float_ops is filled by tfprof Python API when called. It requires the
	// op has RegisterStatistics defined. Currently, Conv2D, MatMul, etc, are
	// implemented.
	FloatOps int64 `protobuf:"varint,2,opt,name=float_ops,json=floatOps,proto3" json:"float_ops,omitempty"`
	// User can define extra op type information for an op. This allows the user
	// to select a group of ops precisely using op_type as a key.
	Types []string `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
	// Used to support tfprof "code" view.
	CodeDef *CodeDef `protobuf:"bytes,4,opt,name=code_def,json=codeDef,proto3" json:"code_def,omitempty"`
}

func (x *OpLogEntry) Reset() {
	*x = OpLogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpLogEntry) ProtoMessage() {}

func (x *OpLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpLogEntry.ProtoReflect.Descriptor instead.
func (*OpLogEntry) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_log_proto_rawDescGZIP(), []int{1}
}

func (x *OpLogEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpLogEntry) GetFloatOps() int64 {
	if x != nil {
		return x.FloatOps
	}
	return 0
}

func (x *OpLogEntry) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *OpLogEntry) GetCodeDef() *CodeDef {
	if x != nil {
		return x.CodeDef
	}
	return nil
}

type OpLogProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogEntries []*OpLogEntry `protobuf:"bytes,1,rep,name=log_entries,json=logEntries,proto3" json:"log_entries,omitempty"`
	// Maps from id of CodeDef file,function,line to its string
	// In the future can also map other id of other fields to string.
	IdToString map[int64]string `protobuf:"bytes,2,rep,name=id_to_string,json=idToString,proto3" json:"id_to_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OpLogProto) Reset() {
	*x = OpLogProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpLogProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpLogProto) ProtoMessage() {}

func (x *OpLogProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpLogProto.ProtoReflect.Descriptor instead.
func (*OpLogProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_log_proto_rawDescGZIP(), []int{2}
}

func (x *OpLogProto) GetLogEntries() []*OpLogEntry {
	if x != nil {
		return x.LogEntries
	}
	return nil
}

func (x *OpLogProto) GetIdToString() map[int64]string {
	if x != nil {
		return x.IdToString
	}
	return nil
}

// A proto representation of the profiler's profile.
// It allows serialization, shipping around and deserialization of the profiles.
//
// Please don't depend on the internals of the profile proto.
type ProfileProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes map[int64]*ProfileNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Whether or not has code traces.
	HasTrace bool `protobuf:"varint,2,opt,name=has_trace,json=hasTrace,proto3" json:"has_trace,omitempty"`
	// Whether or not the TF device tracer fails to return accelerator
	// information (which could lead to 0 accelerator execution time).
	MissAcceleratorStream bool `protobuf:"varint,5,opt,name=miss_accelerator_stream,json=missAcceleratorStream,proto3" json:"miss_accelerator_stream,omitempty"`
	// Traced steps.
	Steps []int64 `protobuf:"varint,3,rep,packed,name=steps,proto3" json:"steps,omitempty"`
	// Maps from id of CodeDef file,function,line to its string
	// In the future can also map other id of other fields to string.
	IdToString map[int64]string `protobuf:"bytes,4,rep,name=id_to_string,json=idToString,proto3" json:"id_to_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProfileProto) Reset() {
	*x = ProfileProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileProto) ProtoMessage() {}

func (x *ProfileProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileProto.ProtoReflect.Descriptor instead.
func (*ProfileProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_log_proto_rawDescGZIP(), []int{3}
}

func (x *ProfileProto) GetNodes() map[int64]*ProfileNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ProfileProto) GetHasTrace() bool {
	if x != nil {
		return x.HasTrace
	}
	return false
}

func (x *ProfileProto) GetMissAcceleratorStream() bool {
	if x != nil {
		return x.MissAcceleratorStream
	}
	return false
}

func (x *ProfileProto) GetSteps() []int64 {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *ProfileProto) GetIdToString() map[int64]string {
	if x != nil {
		return x.IdToString
	}
	return nil
}

type ProfileNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// graph node name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// graph operation type.
	Op string `protobuf:"bytes,9,opt,name=op,proto3" json:"op,omitempty"`
	// A unique id for the node.
	Id           int64            `protobuf:"varint,13,opt,name=id,proto3" json:"id,omitempty"`
	Inputs       map[int32]int64  `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	InputShapes  map[int32]*Tuple `protobuf:"bytes,16,rep,name=input_shapes,json=inputShapes,proto3" json:"input_shapes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Outputs      map[int32]int64  `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	OutputShapes map[int32]*Tuple `protobuf:"bytes,15,rep,name=output_shapes,json=outputShapes,proto3" json:"output_shapes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A map from source node id to its output index to current node.
	SrcOutputIndex  map[int64]int32                 `protobuf:"bytes,14,rep,name=src_output_index,json=srcOutputIndex,proto3" json:"src_output_index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Shape           []int64                         `protobuf:"varint,4,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	OpTypes         []string                        `protobuf:"bytes,5,rep,name=op_types,json=opTypes,proto3" json:"op_types,omitempty"`
	CanonicalDevice string                          `protobuf:"bytes,6,opt,name=canonical_device,json=canonicalDevice,proto3" json:"canonical_device,omitempty"`
	HostDevice      string                          `protobuf:"bytes,7,opt,name=host_device,json=hostDevice,proto3" json:"host_device,omitempty"`
	FloatOps        int64                           `protobuf:"varint,8,opt,name=float_ops,json=floatOps,proto3" json:"float_ops,omitempty"`
	Trace           *CodeDef                        `protobuf:"bytes,10,opt,name=trace,proto3" json:"trace,omitempty"`
	Attrs           map[string]*framework.AttrValue `protobuf:"bytes,11,rep,name=attrs,proto3" json:"attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Execs           map[int64]*ExecProfile          `protobuf:"bytes,12,rep,name=execs,proto3" json:"execs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProfileNode) Reset() {
	*x = ProfileNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileNode) ProtoMessage() {}

func (x *ProfileNode) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileNode.ProtoReflect.Descriptor instead.
func (*ProfileNode) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_log_proto_rawDescGZIP(), []int{4}
}

func (x *ProfileNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProfileNode) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *ProfileNode) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProfileNode) GetInputs() map[int32]int64 {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ProfileNode) GetInputShapes() map[int32]*Tuple {
	if x != nil {
		return x.InputShapes
	}
	return nil
}

func (x *ProfileNode) GetOutputs() map[int32]int64 {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *ProfileNode) GetOutputShapes() map[int32]*Tuple {
	if x != nil {
		return x.OutputShapes
	}
	return nil
}

func (x *ProfileNode) GetSrcOutputIndex() map[int64]int32 {
	if x != nil {
		return x.SrcOutputIndex
	}
	return nil
}

func (x *ProfileNode) GetShape() []int64 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *ProfileNode) GetOpTypes() []string {
	if x != nil {
		return x.OpTypes
	}
	return nil
}

func (x *ProfileNode) GetCanonicalDevice() string {
	if x != nil {
		return x.CanonicalDevice
	}
	return ""
}

func (x *ProfileNode) GetHostDevice() string {
	if x != nil {
		return x.HostDevice
	}
	return ""
}

func (x *ProfileNode) GetFloatOps() int64 {
	if x != nil {
		return x.FloatOps
	}
	return 0
}

func (x *ProfileNode) GetTrace() *CodeDef {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *ProfileNode) GetAttrs() map[string]*framework.AttrValue {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *ProfileNode) GetExecs() map[int64]*ExecProfile {
	if x != nil {
		return x.Execs
	}
	return nil
}

type ExecProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can be larger than 1 if run multiple times in loop.
	RunCount int64 `protobuf:"varint,1,opt,name=run_count,json=runCount,proto3" json:"run_count,omitempty"`
	// The earliest/latest time including scheduling and execution.
	AllStartMicros  int64 `protobuf:"varint,2,opt,name=all_start_micros,json=allStartMicros,proto3" json:"all_start_micros,omitempty"`
	LatestEndMicros int64 `protobuf:"varint,3,opt,name=latest_end_micros,json=latestEndMicros,proto3" json:"latest_end_micros,omitempty"`
	// device -> vector of {op_start_micros, op_exec_micros} pairs.
	// accelerator_execs: gpu:id/stream:all -> {op_start_micros, op_exec_micros}
	// For accelerator, vector size can be larger than 1, multiple kernel fires
	// or in tf.while_loop.
	AcceleratorExecs map[string]*ExecTime `protobuf:"bytes,4,rep,name=accelerator_execs,json=acceleratorExecs,proto3" json:"accelerator_execs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// cpu_execs: cpu/gpu:id -> {op_start_micros, op_exec_micros}
	// For cpu, vector size can be larger than 1 if in tf.while_loop.
	CpuExecs map[string]*ExecTime `protobuf:"bytes,5,rep,name=cpu_execs,json=cpuExecs,proto3" json:"cpu_execs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Each entry to memory information of a scheduling of the node.
	// Normally, there will be multiple entries in while_loop.
	MemoryExecs []*ExecMemory `protobuf:"bytes,7,rep,name=memory_execs,json=memoryExecs,proto3" json:"memory_execs,omitempty"`
	// The allocation and deallocation times and sizes throughout execution.
	Allocations []*framework.AllocationRecord `protobuf:"bytes,11,rep,name=allocations,proto3" json:"allocations,omitempty"`
	// The devices related to this execution.
	Devices []string `protobuf:"bytes,6,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *ExecProfile) Reset() {
	*x = ExecProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecProfile) ProtoMessage() {}

func (x *ExecProfile) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecProfile.ProtoReflect.Descriptor instead.
func (*ExecProfile) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_log_proto_rawDescGZIP(), []int{5}
}

func (x *ExecProfile) GetRunCount() int64 {
	if x != nil {
		return x.RunCount
	}
	return 0
}

func (x *ExecProfile) GetAllStartMicros() int64 {
	if x != nil {
		return x.AllStartMicros
	}
	return 0
}

func (x *ExecProfile) GetLatestEndMicros() int64 {
	if x != nil {
		return x.LatestEndMicros
	}
	return 0
}

func (x *ExecProfile) GetAcceleratorExecs() map[string]*ExecTime {
	if x != nil {
		return x.AcceleratorExecs
	}
	return nil
}

func (x *ExecProfile) GetCpuExecs() map[string]*ExecTime {
	if x != nil {
		return x.CpuExecs
	}
	return nil
}

func (x *ExecProfile) GetMemoryExecs() []*ExecMemory {
	if x != nil {
		return x.MemoryExecs
	}
	return nil
}

func (x *ExecProfile) GetAllocations() []*framework.AllocationRecord {
	if x != nil {
		return x.Allocations
	}
	return nil
}

func (x *ExecProfile) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

type ExecTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times []*Tuple `protobuf:"bytes,1,rep,name=times,proto3" json:"times,omitempty"`
}

func (x *ExecTime) Reset() {
	*x = ExecTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecTime) ProtoMessage() {}

func (x *ExecTime) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecTime.ProtoReflect.Descriptor instead.
func (*ExecTime) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_log_proto_rawDescGZIP(), []int{6}
}

func (x *ExecTime) GetTimes() []*Tuple {
	if x != nil {
		return x.Times
	}
	return nil
}

type ExecMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the timestamp when the memory information was tracked.
	MemoryMicros int64 `protobuf:"varint,1,opt,name=memory_micros,json=memoryMicros,proto3" json:"memory_micros,omitempty"`
	// NOTE: Please don't depend on the following 4 fields yet. Due to
	// TensorFlow internal tracing issues, the numbers can be quite wrong.
	// TODO(xpan): Fix the TensorFlow internal tracing.
	HostTempBytes              int64 `protobuf:"varint,2,opt,name=host_temp_bytes,json=hostTempBytes,proto3" json:"host_temp_bytes,omitempty"`
	HostPersistentBytes        int64 `protobuf:"varint,3,opt,name=host_persistent_bytes,json=hostPersistentBytes,proto3" json:"host_persistent_bytes,omitempty"`
	AcceleratorTempBytes       int64 `protobuf:"varint,4,opt,name=accelerator_temp_bytes,json=acceleratorTempBytes,proto3" json:"accelerator_temp_bytes,omitempty"`
	AcceleratorPersistentBytes int64 `protobuf:"varint,5,opt,name=accelerator_persistent_bytes,json=acceleratorPersistentBytes,proto3" json:"accelerator_persistent_bytes,omitempty"`
	// Total bytes requested by the op.
	RequestedBytes int64 `protobuf:"varint,6,opt,name=requested_bytes,json=requestedBytes,proto3" json:"requested_bytes,omitempty"`
	// Total bytes requested by the op and released before op end.
	PeakBytes int64 `protobuf:"varint,7,opt,name=peak_bytes,json=peakBytes,proto3" json:"peak_bytes,omitempty"`
	// Total bytes requested by the op and not released after op end.
	ResidualBytes int64 `protobuf:"varint,8,opt,name=residual_bytes,json=residualBytes,proto3" json:"residual_bytes,omitempty"`
	// Total bytes output by the op (not necessarily requested by the op).
	OutputBytes int64 `protobuf:"varint,9,opt,name=output_bytes,json=outputBytes,proto3" json:"output_bytes,omitempty"`
	// The total number of bytes currently allocated by the allocator if >0.
	AllocatorBytesInUse int64 `protobuf:"varint,10,opt,name=allocator_bytes_in_use,json=allocatorBytesInUse,proto3" json:"allocator_bytes_in_use,omitempty"`
	// The memory of each output of the operation.
	OutputMemory map[int32]*Memory `protobuf:"bytes,11,rep,name=output_memory,json=outputMemory,proto3" json:"output_memory,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExecMemory) Reset() {
	*x = ExecMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecMemory) ProtoMessage() {}

func (x *ExecMemory) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecMemory.ProtoReflect.Descriptor instead.
func (*ExecMemory) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_log_proto_rawDescGZIP(), []int{7}
}

func (x *ExecMemory) GetMemoryMicros() int64 {
	if x != nil {
		return x.MemoryMicros
	}
	return 0
}

func (x *ExecMemory) GetHostTempBytes() int64 {
	if x != nil {
		return x.HostTempBytes
	}
	return 0
}

func (x *ExecMemory) GetHostPersistentBytes() int64 {
	if x != nil {
		return x.HostPersistentBytes
	}
	return 0
}

func (x *ExecMemory) GetAcceleratorTempBytes() int64 {
	if x != nil {
		return x.AcceleratorTempBytes
	}
	return 0
}

func (x *ExecMemory) GetAcceleratorPersistentBytes() int64 {
	if x != nil {
		return x.AcceleratorPersistentBytes
	}
	return 0
}

func (x *ExecMemory) GetRequestedBytes() int64 {
	if x != nil {
		return x.RequestedBytes
	}
	return 0
}

func (x *ExecMemory) GetPeakBytes() int64 {
	if x != nil {
		return x.PeakBytes
	}
	return 0
}

func (x *ExecMemory) GetResidualBytes() int64 {
	if x != nil {
		return x.ResidualBytes
	}
	return 0
}

func (x *ExecMemory) GetOutputBytes() int64 {
	if x != nil {
		return x.OutputBytes
	}
	return 0
}

func (x *ExecMemory) GetAllocatorBytesInUse() int64 {
	if x != nil {
		return x.AllocatorBytesInUse
	}
	return 0
}

func (x *ExecMemory) GetOutputMemory() map[int32]*Memory {
	if x != nil {
		return x.OutputMemory
	}
	return nil
}

type Tuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int64Values []int64 `protobuf:"varint,1,rep,packed,name=int64_values,json=int64Values,proto3" json:"int64_values,omitempty"`
}

func (x *Tuple) Reset() {
	*x = Tuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tuple) ProtoMessage() {}

func (x *Tuple) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tuple.ProtoReflect.Descriptor instead.
func (*Tuple) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_log_proto_rawDescGZIP(), []int{8}
}

func (x *Tuple) GetInt64Values() []int64 {
	if x != nil {
		return x.Int64Values
	}
	return nil
}

type Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes int64  `protobuf:"varint,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Ptr   uint64 `protobuf:"varint,2,opt,name=ptr,proto3" json:"ptr,omitempty"`
}

func (x *Memory) Reset() {
	*x = Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memory) ProtoMessage() {}

func (x *Memory) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memory.ProtoReflect.Descriptor instead.
func (*Memory) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_log_proto_rawDescGZIP(), []int{9}
}

func (x *Memory) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *Memory) GetPtr() uint64 {
	if x != nil {
		return x.Ptr
	}
	return 0
}

type CodeDef_Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	File   string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"` // deprecated by file_id.
	FileId int64  `protobuf:"varint,6,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Lineno int32  `protobuf:"varint,2,opt,name=lineno,proto3" json:"lineno,omitempty"`
	// Deprecated: Do not use.
	Function   string `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"` // deprecated by function_id.
	FunctionId int64  `protobuf:"varint,7,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	// Deprecated: Do not use.
	Line          string `protobuf:"bytes,4,opt,name=line,proto3" json:"line,omitempty"` // deprecated line_id.
	LineId        int64  `protobuf:"varint,8,opt,name=line_id,json=lineId,proto3" json:"line_id,omitempty"`
	FuncStartLine int32  `protobuf:"varint,5,opt,name=func_start_line,json=funcStartLine,proto3" json:"func_start_line,omitempty"`
}

func (x *CodeDef_Trace) Reset() {
	*x = CodeDef_Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeDef_Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeDef_Trace) ProtoMessage() {}

func (x *CodeDef_Trace) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeDef_Trace.ProtoReflect.Descriptor instead.
func (*CodeDef_Trace) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_log_proto_rawDescGZIP(), []int{0, 0}
}

// Deprecated: Do not use.
func (x *CodeDef_Trace) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *CodeDef_Trace) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *CodeDef_Trace) GetLineno() int32 {
	if x != nil {
		return x.Lineno
	}
	return 0
}

// Deprecated: Do not use.
func (x *CodeDef_Trace) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *CodeDef_Trace) GetFunctionId() int64 {
	if x != nil {
		return x.FunctionId
	}
	return 0
}

// Deprecated: Do not use.
func (x *CodeDef_Trace) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

func (x *CodeDef_Trace) GetLineId() int64 {
	if x != nil {
		return x.LineId
	}
	return 0
}

func (x *CodeDef_Trace) GetFuncStartLine() int32 {
	if x != nil {
		return x.FuncStartLine
	}
	return 0
}

var File_tensorflow_core_profiler_tfprof_log_proto protoreflect.FileDescriptor

var file_tensorflow_core_profiler_tfprof_log_proto_rawDesc = []byte{
	0x0a, 0x29, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x66, 0x70, 0x72, 0x6f,
	0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x1a, 0x2a,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x66, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x1a, 0xea, 0x01, 0x0a,
	0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x6e, 0x6f, 0x12,
	0x1e, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0a, 0x4f, 0x70,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4f, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74,
	0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x52, 0x07, 0x63,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x4f, 0x70, 0x4c, 0x6f, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3e, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x4f,
	0x70, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e,
	0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x54, 0x6f, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x64, 0x54, 0x6f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x3d, 0x0a, 0x0f, 0x49, 0x64, 0x54, 0x6f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x03, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x40, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6d, 0x69, 0x73, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x54, 0x6f, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x64, 0x54, 0x6f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x58, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3d, 0x0a, 0x0f, 0x49, 0x64, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xbd, 0x0a, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f,
	0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x73, 0x72, 0x63,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x2e, 0x53, 0x72, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x72, 0x63, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6f, 0x70,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4f, 0x70,
	0x73, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66,
	0x70, 0x72, 0x6f, 0x66, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x52, 0x05, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x61,
	0x74, 0x74, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x78, 0x65, 0x63, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x65, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x58, 0x0a, 0x10, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x11, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66,
	0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x72, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x86, 0x05, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x12, 0x61, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f,
	0x66, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x65, 0x63, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x45, 0x78, 0x65, 0x63, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x45, 0x78, 0x65, 0x63,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x70, 0x75, 0x45, 0x78, 0x65, 0x63, 0x73,
	0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x65,
	0x63, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x60, 0x0a, 0x15,
	0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x65, 0x63, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58,
	0x0a, 0x0d, 0x43, 0x70, 0x75, 0x45, 0x78, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66,
	0x70, 0x72, 0x6f, 0x66, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x22, 0xfe, 0x04, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1a, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x65, 0x61, 0x6b, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x33,
	0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x1a, 0x5a, 0x0a, 0x11, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70,
	0x72, 0x6f, 0x66, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x05, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x30, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x70, 0x74, 0x72, 0x42, 0x25, 0x5a, 0x23, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_tensorflow_core_profiler_tfprof_log_proto_rawDescOnce sync.Once
	file_tensorflow_core_profiler_tfprof_log_proto_rawDescData = file_tensorflow_core_profiler_tfprof_log_proto_rawDesc
)

func file_tensorflow_core_profiler_tfprof_log_proto_rawDescGZIP() []byte {
	file_tensorflow_core_profiler_tfprof_log_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_profiler_tfprof_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_profiler_tfprof_log_proto_rawDescData)
	})
	return file_tensorflow_core_profiler_tfprof_log_proto_rawDescData
}

var file_tensorflow_core_profiler_tfprof_log_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_tensorflow_core_profiler_tfprof_log_proto_goTypes = []interface{}{
	(*CodeDef)(nil),                    // 0: tensorflow.tfprof.CodeDef
	(*OpLogEntry)(nil),                 // 1: tensorflow.tfprof.OpLogEntry
	(*OpLogProto)(nil),                 // 2: tensorflow.tfprof.OpLogProto
	(*ProfileProto)(nil),               // 3: tensorflow.tfprof.ProfileProto
	(*ProfileNode)(nil),                // 4: tensorflow.tfprof.ProfileNode
	(*ExecProfile)(nil),                // 5: tensorflow.tfprof.ExecProfile
	(*ExecTime)(nil),                   // 6: tensorflow.tfprof.ExecTime
	(*ExecMemory)(nil),                 // 7: tensorflow.tfprof.ExecMemory
	(*Tuple)(nil),                      // 8: tensorflow.tfprof.Tuple
	(*Memory)(nil),                     // 9: tensorflow.tfprof.Memory
	(*CodeDef_Trace)(nil),              // 10: tensorflow.tfprof.CodeDef.Trace
	nil,                                // 11: tensorflow.tfprof.OpLogProto.IdToStringEntry
	nil,                                // 12: tensorflow.tfprof.ProfileProto.NodesEntry
	nil,                                // 13: tensorflow.tfprof.ProfileProto.IdToStringEntry
	nil,                                // 14: tensorflow.tfprof.ProfileNode.InputsEntry
	nil,                                // 15: tensorflow.tfprof.ProfileNode.InputShapesEntry
	nil,                                // 16: tensorflow.tfprof.ProfileNode.OutputsEntry
	nil,                                // 17: tensorflow.tfprof.ProfileNode.OutputShapesEntry
	nil,                                // 18: tensorflow.tfprof.ProfileNode.SrcOutputIndexEntry
	nil,                                // 19: tensorflow.tfprof.ProfileNode.AttrsEntry
	nil,                                // 20: tensorflow.tfprof.ProfileNode.ExecsEntry
	nil,                                // 21: tensorflow.tfprof.ExecProfile.AcceleratorExecsEntry
	nil,                                // 22: tensorflow.tfprof.ExecProfile.CpuExecsEntry
	nil,                                // 23: tensorflow.tfprof.ExecMemory.OutputMemoryEntry
	(*framework.AllocationRecord)(nil), // 24: tensorflow.AllocationRecord
	(*framework.AttrValue)(nil),        // 25: tensorflow.AttrValue
}
var file_tensorflow_core_profiler_tfprof_log_proto_depIdxs = []int32{
	10, // 0: tensorflow.tfprof.CodeDef.traces:type_name -> tensorflow.tfprof.CodeDef.Trace
	0,  // 1: tensorflow.tfprof.OpLogEntry.code_def:type_name -> tensorflow.tfprof.CodeDef
	1,  // 2: tensorflow.tfprof.OpLogProto.log_entries:type_name -> tensorflow.tfprof.OpLogEntry
	11, // 3: tensorflow.tfprof.OpLogProto.id_to_string:type_name -> tensorflow.tfprof.OpLogProto.IdToStringEntry
	12, // 4: tensorflow.tfprof.ProfileProto.nodes:type_name -> tensorflow.tfprof.ProfileProto.NodesEntry
	13, // 5: tensorflow.tfprof.ProfileProto.id_to_string:type_name -> tensorflow.tfprof.ProfileProto.IdToStringEntry
	14, // 6: tensorflow.tfprof.ProfileNode.inputs:type_name -> tensorflow.tfprof.ProfileNode.InputsEntry
	15, // 7: tensorflow.tfprof.ProfileNode.input_shapes:type_name -> tensorflow.tfprof.ProfileNode.InputShapesEntry
	16, // 8: tensorflow.tfprof.ProfileNode.outputs:type_name -> tensorflow.tfprof.ProfileNode.OutputsEntry
	17, // 9: tensorflow.tfprof.ProfileNode.output_shapes:type_name -> tensorflow.tfprof.ProfileNode.OutputShapesEntry
	18, // 10: tensorflow.tfprof.ProfileNode.src_output_index:type_name -> tensorflow.tfprof.ProfileNode.SrcOutputIndexEntry
	0,  // 11: tensorflow.tfprof.ProfileNode.trace:type_name -> tensorflow.tfprof.CodeDef
	19, // 12: tensorflow.tfprof.ProfileNode.attrs:type_name -> tensorflow.tfprof.ProfileNode.AttrsEntry
	20, // 13: tensorflow.tfprof.ProfileNode.execs:type_name -> tensorflow.tfprof.ProfileNode.ExecsEntry
	21, // 14: tensorflow.tfprof.ExecProfile.accelerator_execs:type_name -> tensorflow.tfprof.ExecProfile.AcceleratorExecsEntry
	22, // 15: tensorflow.tfprof.ExecProfile.cpu_execs:type_name -> tensorflow.tfprof.ExecProfile.CpuExecsEntry
	7,  // 16: tensorflow.tfprof.ExecProfile.memory_execs:type_name -> tensorflow.tfprof.ExecMemory
	24, // 17: tensorflow.tfprof.ExecProfile.allocations:type_name -> tensorflow.AllocationRecord
	8,  // 18: tensorflow.tfprof.ExecTime.times:type_name -> tensorflow.tfprof.Tuple
	23, // 19: tensorflow.tfprof.ExecMemory.output_memory:type_name -> tensorflow.tfprof.ExecMemory.OutputMemoryEntry
	4,  // 20: tensorflow.tfprof.ProfileProto.NodesEntry.value:type_name -> tensorflow.tfprof.ProfileNode
	8,  // 21: tensorflow.tfprof.ProfileNode.InputShapesEntry.value:type_name -> tensorflow.tfprof.Tuple
	8,  // 22: tensorflow.tfprof.ProfileNode.OutputShapesEntry.value:type_name -> tensorflow.tfprof.Tuple
	25, // 23: tensorflow.tfprof.ProfileNode.AttrsEntry.value:type_name -> tensorflow.AttrValue
	5,  // 24: tensorflow.tfprof.ProfileNode.ExecsEntry.value:type_name -> tensorflow.tfprof.ExecProfile
	6,  // 25: tensorflow.tfprof.ExecProfile.AcceleratorExecsEntry.value:type_name -> tensorflow.tfprof.ExecTime
	6,  // 26: tensorflow.tfprof.ExecProfile.CpuExecsEntry.value:type_name -> tensorflow.tfprof.ExecTime
	9,  // 27: tensorflow.tfprof.ExecMemory.OutputMemoryEntry.value:type_name -> tensorflow.tfprof.Memory
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_tensorflow_core_profiler_tfprof_log_proto_init() }
func file_tensorflow_core_profiler_tfprof_log_proto_init() {
	if File_tensorflow_core_profiler_tfprof_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpLogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpLogProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_tfprof_log_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeDef_Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_profiler_tfprof_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_profiler_tfprof_log_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_profiler_tfprof_log_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_profiler_tfprof_log_proto_msgTypes,
	}.Build()
	File_tensorflow_core_profiler_tfprof_log_proto = out.File
	file_tensorflow_core_profiler_tfprof_log_proto_rawDesc = nil
	file_tensorflow_core_profiler_tfprof_log_proto_goTypes = nil
	file_tensorflow_core_profiler_tfprof_log_proto_depIdxs = nil
}
