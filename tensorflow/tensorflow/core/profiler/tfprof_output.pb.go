// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.11.4
// source: tensorflow/core/profiler/tfprof_output.proto

package profiler

import (
	framework "Golang-Tools/tensorflow_service_apis/tensorflow/tensorflow/core/framework"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TFProfTensorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dtype framework.DataType `protobuf:"varint,1,opt,name=dtype,proto3,enum=tensorflow.DataType" json:"dtype,omitempty"`
	// Flatten tensor in row-major.
	// Only one of the following array is set.
	ValueDouble []float64 `protobuf:"fixed64,2,rep,packed,name=value_double,json=valueDouble,proto3" json:"value_double,omitempty"`
	ValueInt64  []int64   `protobuf:"varint,3,rep,packed,name=value_int64,json=valueInt64,proto3" json:"value_int64,omitempty"`
	ValueStr    []string  `protobuf:"bytes,4,rep,name=value_str,json=valueStr,proto3" json:"value_str,omitempty"`
}

func (x *TFProfTensorProto) Reset() {
	*x = TFProfTensorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFProfTensorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFProfTensorProto) ProtoMessage() {}

func (x *TFProfTensorProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFProfTensorProto.ProtoReflect.Descriptor instead.
func (*TFProfTensorProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_output_proto_rawDescGZIP(), []int{0}
}

func (x *TFProfTensorProto) GetDtype() framework.DataType {
	if x != nil {
		return x.Dtype
	}
	return framework.DataType_DT_INVALID
}

func (x *TFProfTensorProto) GetValueDouble() []float64 {
	if x != nil {
		return x.ValueDouble
	}
	return nil
}

func (x *TFProfTensorProto) GetValueInt64() []int64 {
	if x != nil {
		return x.ValueInt64
	}
	return nil
}

func (x *TFProfTensorProto) GetValueStr() []string {
	if x != nil {
		return x.ValueStr
	}
	return nil
}

// A node in TensorFlow graph. Used by scope/graph view.
type GraphNodeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// op name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// tensor value restored from checkpoint.
	TensorValue *TFProfTensorProto `protobuf:"bytes,15,opt,name=tensor_value,json=tensorValue,proto3" json:"tensor_value,omitempty"`
	// op execution time.
	// A node can be defined once but run multiple times in tf.while_loop.
	// the times sum up all different runs.
	RunCount              int64 `protobuf:"varint,21,opt,name=run_count,json=runCount,proto3" json:"run_count,omitempty"`
	ExecMicros            int64 `protobuf:"varint,2,opt,name=exec_micros,json=execMicros,proto3" json:"exec_micros,omitempty"`
	AcceleratorExecMicros int64 `protobuf:"varint,17,opt,name=accelerator_exec_micros,json=acceleratorExecMicros,proto3" json:"accelerator_exec_micros,omitempty"`
	CpuExecMicros         int64 `protobuf:"varint,18,opt,name=cpu_exec_micros,json=cpuExecMicros,proto3" json:"cpu_exec_micros,omitempty"`
	// Total bytes requested by the op.
	RequestedBytes int64 `protobuf:"varint,3,opt,name=requested_bytes,json=requestedBytes,proto3" json:"requested_bytes,omitempty"`
	// Max bytes allocated and being used by the op at a point.
	PeakBytes int64 `protobuf:"varint,24,opt,name=peak_bytes,json=peakBytes,proto3" json:"peak_bytes,omitempty"`
	// Total bytes requested by the op and not released before end.
	ResidualBytes int64 `protobuf:"varint,25,opt,name=residual_bytes,json=residualBytes,proto3" json:"residual_bytes,omitempty"`
	// Total bytes output by the op (not necessarily allocated by the op).
	OutputBytes int64 `protobuf:"varint,26,opt,name=output_bytes,json=outputBytes,proto3" json:"output_bytes,omitempty"`
	// Number of parameters if available.
	Parameters int64 `protobuf:"varint,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// Number of float operations.
	FloatOps int64 `protobuf:"varint,13,opt,name=float_ops,json=floatOps,proto3" json:"float_ops,omitempty"`
	// Device the op is assigned to.
	// Since an op can fire multiple kernel calls, there can be multiple devices.
	Devices []string `protobuf:"bytes,10,rep,name=devices,proto3" json:"devices,omitempty"`
	// The following are the aggregated stats from all *accounted* children and
	// the node itself. The actual children depend on the data structure used.
	// In graph view, children are inputs recursively.
	// In scope view, children are nodes under the name scope.
	TotalDefinitionCount       int64 `protobuf:"varint,23,opt,name=total_definition_count,json=totalDefinitionCount,proto3" json:"total_definition_count,omitempty"`
	TotalRunCount              int64 `protobuf:"varint,22,opt,name=total_run_count,json=totalRunCount,proto3" json:"total_run_count,omitempty"`
	TotalExecMicros            int64 `protobuf:"varint,6,opt,name=total_exec_micros,json=totalExecMicros,proto3" json:"total_exec_micros,omitempty"`
	TotalAcceleratorExecMicros int64 `protobuf:"varint,19,opt,name=total_accelerator_exec_micros,json=totalAcceleratorExecMicros,proto3" json:"total_accelerator_exec_micros,omitempty"`
	TotalCpuExecMicros         int64 `protobuf:"varint,20,opt,name=total_cpu_exec_micros,json=totalCpuExecMicros,proto3" json:"total_cpu_exec_micros,omitempty"`
	TotalRequestedBytes        int64 `protobuf:"varint,7,opt,name=total_requested_bytes,json=totalRequestedBytes,proto3" json:"total_requested_bytes,omitempty"`
	TotalPeakBytes             int64 `protobuf:"varint,27,opt,name=total_peak_bytes,json=totalPeakBytes,proto3" json:"total_peak_bytes,omitempty"`
	TotalResidualBytes         int64 `protobuf:"varint,28,opt,name=total_residual_bytes,json=totalResidualBytes,proto3" json:"total_residual_bytes,omitempty"`
	TotalOutputBytes           int64 `protobuf:"varint,29,opt,name=total_output_bytes,json=totalOutputBytes,proto3" json:"total_output_bytes,omitempty"`
	TotalParameters            int64 `protobuf:"varint,8,opt,name=total_parameters,json=totalParameters,proto3" json:"total_parameters,omitempty"`
	TotalFloatOps              int64 `protobuf:"varint,14,opt,name=total_float_ops,json=totalFloatOps,proto3" json:"total_float_ops,omitempty"`
	// shape information, if available.
	// TODO(xpan): Why is this repeated?
	Shapes      []*framework.TensorShapeProto         `protobuf:"bytes,11,rep,name=shapes,proto3" json:"shapes,omitempty"`
	InputShapes map[int32]*framework.TensorShapeProto `protobuf:"bytes,16,rep,name=input_shapes,json=inputShapes,proto3" json:"input_shapes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Descendants of the graph. The actual descendants depend on the data
	// structure used (scope, graph).
	Children []*GraphNodeProto `protobuf:"bytes,12,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *GraphNodeProto) Reset() {
	*x = GraphNodeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphNodeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphNodeProto) ProtoMessage() {}

func (x *GraphNodeProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphNodeProto.ProtoReflect.Descriptor instead.
func (*GraphNodeProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_output_proto_rawDescGZIP(), []int{1}
}

func (x *GraphNodeProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GraphNodeProto) GetTensorValue() *TFProfTensorProto {
	if x != nil {
		return x.TensorValue
	}
	return nil
}

func (x *GraphNodeProto) GetRunCount() int64 {
	if x != nil {
		return x.RunCount
	}
	return 0
}

func (x *GraphNodeProto) GetExecMicros() int64 {
	if x != nil {
		return x.ExecMicros
	}
	return 0
}

func (x *GraphNodeProto) GetAcceleratorExecMicros() int64 {
	if x != nil {
		return x.AcceleratorExecMicros
	}
	return 0
}

func (x *GraphNodeProto) GetCpuExecMicros() int64 {
	if x != nil {
		return x.CpuExecMicros
	}
	return 0
}

func (x *GraphNodeProto) GetRequestedBytes() int64 {
	if x != nil {
		return x.RequestedBytes
	}
	return 0
}

func (x *GraphNodeProto) GetPeakBytes() int64 {
	if x != nil {
		return x.PeakBytes
	}
	return 0
}

func (x *GraphNodeProto) GetResidualBytes() int64 {
	if x != nil {
		return x.ResidualBytes
	}
	return 0
}

func (x *GraphNodeProto) GetOutputBytes() int64 {
	if x != nil {
		return x.OutputBytes
	}
	return 0
}

func (x *GraphNodeProto) GetParameters() int64 {
	if x != nil {
		return x.Parameters
	}
	return 0
}

func (x *GraphNodeProto) GetFloatOps() int64 {
	if x != nil {
		return x.FloatOps
	}
	return 0
}

func (x *GraphNodeProto) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *GraphNodeProto) GetTotalDefinitionCount() int64 {
	if x != nil {
		return x.TotalDefinitionCount
	}
	return 0
}

func (x *GraphNodeProto) GetTotalRunCount() int64 {
	if x != nil {
		return x.TotalRunCount
	}
	return 0
}

func (x *GraphNodeProto) GetTotalExecMicros() int64 {
	if x != nil {
		return x.TotalExecMicros
	}
	return 0
}

func (x *GraphNodeProto) GetTotalAcceleratorExecMicros() int64 {
	if x != nil {
		return x.TotalAcceleratorExecMicros
	}
	return 0
}

func (x *GraphNodeProto) GetTotalCpuExecMicros() int64 {
	if x != nil {
		return x.TotalCpuExecMicros
	}
	return 0
}

func (x *GraphNodeProto) GetTotalRequestedBytes() int64 {
	if x != nil {
		return x.TotalRequestedBytes
	}
	return 0
}

func (x *GraphNodeProto) GetTotalPeakBytes() int64 {
	if x != nil {
		return x.TotalPeakBytes
	}
	return 0
}

func (x *GraphNodeProto) GetTotalResidualBytes() int64 {
	if x != nil {
		return x.TotalResidualBytes
	}
	return 0
}

func (x *GraphNodeProto) GetTotalOutputBytes() int64 {
	if x != nil {
		return x.TotalOutputBytes
	}
	return 0
}

func (x *GraphNodeProto) GetTotalParameters() int64 {
	if x != nil {
		return x.TotalParameters
	}
	return 0
}

func (x *GraphNodeProto) GetTotalFloatOps() int64 {
	if x != nil {
		return x.TotalFloatOps
	}
	return 0
}

func (x *GraphNodeProto) GetShapes() []*framework.TensorShapeProto {
	if x != nil {
		return x.Shapes
	}
	return nil
}

func (x *GraphNodeProto) GetInputShapes() map[int32]*framework.TensorShapeProto {
	if x != nil {
		return x.InputShapes
	}
	return nil
}

func (x *GraphNodeProto) GetChildren() []*GraphNodeProto {
	if x != nil {
		return x.Children
	}
	return nil
}

// A node that groups multiple GraphNodeProto.
// Depending on the 'view', the semantics of the TFmultiGraphNodeProto
// is different:
// code view: A node groups all TensorFlow graph nodes created by the
//            Python code.
// op view:   A node groups all TensorFlow graph nodes that are of type
//            of the op (e.g. MatMul, Conv2D).
type MultiGraphNodeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the node.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// code execution time.
	ExecMicros            int64 `protobuf:"varint,2,opt,name=exec_micros,json=execMicros,proto3" json:"exec_micros,omitempty"`
	AcceleratorExecMicros int64 `protobuf:"varint,12,opt,name=accelerator_exec_micros,json=acceleratorExecMicros,proto3" json:"accelerator_exec_micros,omitempty"`
	CpuExecMicros         int64 `protobuf:"varint,13,opt,name=cpu_exec_micros,json=cpuExecMicros,proto3" json:"cpu_exec_micros,omitempty"`
	// Total requested bytes by the code.
	RequestedBytes int64 `protobuf:"varint,3,opt,name=requested_bytes,json=requestedBytes,proto3" json:"requested_bytes,omitempty"`
	// Max bytes allocated and being used by the op at a point.
	PeakBytes int64 `protobuf:"varint,16,opt,name=peak_bytes,json=peakBytes,proto3" json:"peak_bytes,omitempty"`
	// Total bytes requested by the op and not released before end.
	ResidualBytes int64 `protobuf:"varint,17,opt,name=residual_bytes,json=residualBytes,proto3" json:"residual_bytes,omitempty"`
	// Total bytes output by the op (not necessarily allocated by the op).
	OutputBytes int64 `protobuf:"varint,18,opt,name=output_bytes,json=outputBytes,proto3" json:"output_bytes,omitempty"`
	// Number of parameters if available.
	Parameters int64 `protobuf:"varint,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// Number of float operations.
	FloatOps int64 `protobuf:"varint,5,opt,name=float_ops,json=floatOps,proto3" json:"float_ops,omitempty"`
	// The following are the aggregated stats from descendants.
	// The actual descendants depend on the data structure used.
	TotalExecMicros            int64 `protobuf:"varint,6,opt,name=total_exec_micros,json=totalExecMicros,proto3" json:"total_exec_micros,omitempty"`
	TotalAcceleratorExecMicros int64 `protobuf:"varint,14,opt,name=total_accelerator_exec_micros,json=totalAcceleratorExecMicros,proto3" json:"total_accelerator_exec_micros,omitempty"`
	TotalCpuExecMicros         int64 `protobuf:"varint,15,opt,name=total_cpu_exec_micros,json=totalCpuExecMicros,proto3" json:"total_cpu_exec_micros,omitempty"`
	TotalRequestedBytes        int64 `protobuf:"varint,7,opt,name=total_requested_bytes,json=totalRequestedBytes,proto3" json:"total_requested_bytes,omitempty"`
	TotalPeakBytes             int64 `protobuf:"varint,19,opt,name=total_peak_bytes,json=totalPeakBytes,proto3" json:"total_peak_bytes,omitempty"`
	TotalResidualBytes         int64 `protobuf:"varint,20,opt,name=total_residual_bytes,json=totalResidualBytes,proto3" json:"total_residual_bytes,omitempty"`
	TotalOutputBytes           int64 `protobuf:"varint,21,opt,name=total_output_bytes,json=totalOutputBytes,proto3" json:"total_output_bytes,omitempty"`
	TotalParameters            int64 `protobuf:"varint,8,opt,name=total_parameters,json=totalParameters,proto3" json:"total_parameters,omitempty"`
	TotalFloatOps              int64 `protobuf:"varint,9,opt,name=total_float_ops,json=totalFloatOps,proto3" json:"total_float_ops,omitempty"`
	// TensorFlow graph nodes contained by the MultiGraphNodeProto.
	GraphNodes []*GraphNodeProto `protobuf:"bytes,10,rep,name=graph_nodes,json=graphNodes,proto3" json:"graph_nodes,omitempty"`
	// Descendants of the node. The actual descendants depend on the data
	// structure used.
	Children []*MultiGraphNodeProto `protobuf:"bytes,11,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *MultiGraphNodeProto) Reset() {
	*x = MultiGraphNodeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiGraphNodeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiGraphNodeProto) ProtoMessage() {}

func (x *MultiGraphNodeProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiGraphNodeProto.ProtoReflect.Descriptor instead.
func (*MultiGraphNodeProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_output_proto_rawDescGZIP(), []int{2}
}

func (x *MultiGraphNodeProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MultiGraphNodeProto) GetExecMicros() int64 {
	if x != nil {
		return x.ExecMicros
	}
	return 0
}

func (x *MultiGraphNodeProto) GetAcceleratorExecMicros() int64 {
	if x != nil {
		return x.AcceleratorExecMicros
	}
	return 0
}

func (x *MultiGraphNodeProto) GetCpuExecMicros() int64 {
	if x != nil {
		return x.CpuExecMicros
	}
	return 0
}

func (x *MultiGraphNodeProto) GetRequestedBytes() int64 {
	if x != nil {
		return x.RequestedBytes
	}
	return 0
}

func (x *MultiGraphNodeProto) GetPeakBytes() int64 {
	if x != nil {
		return x.PeakBytes
	}
	return 0
}

func (x *MultiGraphNodeProto) GetResidualBytes() int64 {
	if x != nil {
		return x.ResidualBytes
	}
	return 0
}

func (x *MultiGraphNodeProto) GetOutputBytes() int64 {
	if x != nil {
		return x.OutputBytes
	}
	return 0
}

func (x *MultiGraphNodeProto) GetParameters() int64 {
	if x != nil {
		return x.Parameters
	}
	return 0
}

func (x *MultiGraphNodeProto) GetFloatOps() int64 {
	if x != nil {
		return x.FloatOps
	}
	return 0
}

func (x *MultiGraphNodeProto) GetTotalExecMicros() int64 {
	if x != nil {
		return x.TotalExecMicros
	}
	return 0
}

func (x *MultiGraphNodeProto) GetTotalAcceleratorExecMicros() int64 {
	if x != nil {
		return x.TotalAcceleratorExecMicros
	}
	return 0
}

func (x *MultiGraphNodeProto) GetTotalCpuExecMicros() int64 {
	if x != nil {
		return x.TotalCpuExecMicros
	}
	return 0
}

func (x *MultiGraphNodeProto) GetTotalRequestedBytes() int64 {
	if x != nil {
		return x.TotalRequestedBytes
	}
	return 0
}

func (x *MultiGraphNodeProto) GetTotalPeakBytes() int64 {
	if x != nil {
		return x.TotalPeakBytes
	}
	return 0
}

func (x *MultiGraphNodeProto) GetTotalResidualBytes() int64 {
	if x != nil {
		return x.TotalResidualBytes
	}
	return 0
}

func (x *MultiGraphNodeProto) GetTotalOutputBytes() int64 {
	if x != nil {
		return x.TotalOutputBytes
	}
	return 0
}

func (x *MultiGraphNodeProto) GetTotalParameters() int64 {
	if x != nil {
		return x.TotalParameters
	}
	return 0
}

func (x *MultiGraphNodeProto) GetTotalFloatOps() int64 {
	if x != nil {
		return x.TotalFloatOps
	}
	return 0
}

func (x *MultiGraphNodeProto) GetGraphNodes() []*GraphNodeProto {
	if x != nil {
		return x.GraphNodes
	}
	return nil
}

func (x *MultiGraphNodeProto) GetChildren() []*MultiGraphNodeProto {
	if x != nil {
		return x.Children
	}
	return nil
}

type AdviceProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// checker name -> a list of reports from the checker.
	Checkers map[string]*AdviceProto_Checker `protobuf:"bytes,1,rep,name=checkers,proto3" json:"checkers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AdviceProto) Reset() {
	*x = AdviceProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdviceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdviceProto) ProtoMessage() {}

func (x *AdviceProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdviceProto.ProtoReflect.Descriptor instead.
func (*AdviceProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_output_proto_rawDescGZIP(), []int{3}
}

func (x *AdviceProto) GetCheckers() map[string]*AdviceProto_Checker {
	if x != nil {
		return x.Checkers
	}
	return nil
}

type AdviceProto_Checker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []string `protobuf:"bytes,2,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *AdviceProto_Checker) Reset() {
	*x = AdviceProto_Checker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdviceProto_Checker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdviceProto_Checker) ProtoMessage() {}

func (x *AdviceProto_Checker) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdviceProto_Checker.ProtoReflect.Descriptor instead.
func (*AdviceProto_Checker) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_tfprof_output_proto_rawDescGZIP(), []int{3, 1}
}

func (x *AdviceProto_Checker) GetReports() []string {
	if x != nil {
		return x.Reports
	}
	return nil
}

var File_tensorflow_core_profiler_tfprof_output_proto protoreflect.FileDescriptor

var file_tensorflow_core_profiler_tfprof_output_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x66, 0x70, 0x72, 0x6f,
	0x66, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f,
	0x66, 0x1a, 0x2c, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x11, 0x54, 0x46, 0x50, 0x72, 0x6f,
	0x66, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x0a, 0x05,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x22, 0xaf, 0x0a, 0x0a, 0x0e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x47, 0x0a, 0x0c, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x54, 0x46, 0x50, 0x72, 0x6f,
	0x66, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x75,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x65,
	0x63, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x65, 0x63, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x70, 0x75, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x70, 0x75, 0x45, 0x78, 0x65,
	0x63, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x65, 0x61, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x4f, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x45, 0x78, 0x65, 0x63, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x45, 0x78, 0x65, 0x63, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x31, 0x0a,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x45, 0x78, 0x65, 0x63, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x65,
	0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x61, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4f, 0x70,
	0x73, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x70, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f,
	0x66, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x12, 0x3d,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66,
	0x70, 0x72, 0x6f, 0x66, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x1a, 0x5c, 0x0a,
	0x10, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x07, 0x0a, 0x13,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x5f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78,
	0x65, 0x63, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x65, 0x63, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x70, 0x75, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x70, 0x75, 0x45, 0x78,
	0x65, 0x63, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x65, 0x61, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75,
	0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x4f, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x65, 0x63,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x70, 0x75, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x45,
	0x78, 0x65, 0x63, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65,
	0x61, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x69,
	0x64, 0x75, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4f, 0x70, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70,
	0x72, 0x6f, 0x66, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66,
	0x70, 0x72, 0x6f, 0x66, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x74, 0x66, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x63, 0x0a, 0x0d,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x70, 0x72,
	0x6f, 0x66, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x23, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x25, 0x5a, 0x23, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_profiler_tfprof_output_proto_rawDescOnce sync.Once
	file_tensorflow_core_profiler_tfprof_output_proto_rawDescData = file_tensorflow_core_profiler_tfprof_output_proto_rawDesc
)

func file_tensorflow_core_profiler_tfprof_output_proto_rawDescGZIP() []byte {
	file_tensorflow_core_profiler_tfprof_output_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_profiler_tfprof_output_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_profiler_tfprof_output_proto_rawDescData)
	})
	return file_tensorflow_core_profiler_tfprof_output_proto_rawDescData
}

var file_tensorflow_core_profiler_tfprof_output_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_tensorflow_core_profiler_tfprof_output_proto_goTypes = []interface{}{
	(*TFProfTensorProto)(nil),          // 0: tensorflow.tfprof.TFProfTensorProto
	(*GraphNodeProto)(nil),             // 1: tensorflow.tfprof.GraphNodeProto
	(*MultiGraphNodeProto)(nil),        // 2: tensorflow.tfprof.MultiGraphNodeProto
	(*AdviceProto)(nil),                // 3: tensorflow.tfprof.AdviceProto
	nil,                                // 4: tensorflow.tfprof.GraphNodeProto.InputShapesEntry
	nil,                                // 5: tensorflow.tfprof.AdviceProto.CheckersEntry
	(*AdviceProto_Checker)(nil),        // 6: tensorflow.tfprof.AdviceProto.Checker
	(framework.DataType)(0),            // 7: tensorflow.DataType
	(*framework.TensorShapeProto)(nil), // 8: tensorflow.TensorShapeProto
}
var file_tensorflow_core_profiler_tfprof_output_proto_depIdxs = []int32{
	7,  // 0: tensorflow.tfprof.TFProfTensorProto.dtype:type_name -> tensorflow.DataType
	0,  // 1: tensorflow.tfprof.GraphNodeProto.tensor_value:type_name -> tensorflow.tfprof.TFProfTensorProto
	8,  // 2: tensorflow.tfprof.GraphNodeProto.shapes:type_name -> tensorflow.TensorShapeProto
	4,  // 3: tensorflow.tfprof.GraphNodeProto.input_shapes:type_name -> tensorflow.tfprof.GraphNodeProto.InputShapesEntry
	1,  // 4: tensorflow.tfprof.GraphNodeProto.children:type_name -> tensorflow.tfprof.GraphNodeProto
	1,  // 5: tensorflow.tfprof.MultiGraphNodeProto.graph_nodes:type_name -> tensorflow.tfprof.GraphNodeProto
	2,  // 6: tensorflow.tfprof.MultiGraphNodeProto.children:type_name -> tensorflow.tfprof.MultiGraphNodeProto
	5,  // 7: tensorflow.tfprof.AdviceProto.checkers:type_name -> tensorflow.tfprof.AdviceProto.CheckersEntry
	8,  // 8: tensorflow.tfprof.GraphNodeProto.InputShapesEntry.value:type_name -> tensorflow.TensorShapeProto
	6,  // 9: tensorflow.tfprof.AdviceProto.CheckersEntry.value:type_name -> tensorflow.tfprof.AdviceProto.Checker
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_tensorflow_core_profiler_tfprof_output_proto_init() }
func file_tensorflow_core_profiler_tfprof_output_proto_init() {
	if File_tensorflow_core_profiler_tfprof_output_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFProfTensorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphNodeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiGraphNodeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdviceProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_tfprof_output_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdviceProto_Checker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_profiler_tfprof_output_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_profiler_tfprof_output_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_profiler_tfprof_output_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_profiler_tfprof_output_proto_msgTypes,
	}.Build()
	File_tensorflow_core_profiler_tfprof_output_proto = out.File
	file_tensorflow_core_profiler_tfprof_output_proto_rawDesc = nil
	file_tensorflow_core_profiler_tfprof_output_proto_goTypes = nil
	file_tensorflow_core_profiler_tfprof_output_proto_depIdxs = nil
}
