// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.11.4
// source: tensorflow/core/kernels/boosted_trees/boosted_trees.proto

package boosted_trees

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Node describes a node in a tree.
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Node:
	//	*Node_Leaf
	//	*Node_BucketizedSplit
	//	*Node_CategoricalSplit
	//	*Node_DenseSplit
	Node     isNode_Node   `protobuf_oneof:"node"`
	Metadata *NodeMetadata `protobuf:"bytes,777,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP(), []int{0}
}

func (m *Node) GetNode() isNode_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *Node) GetLeaf() *Leaf {
	if x, ok := x.GetNode().(*Node_Leaf); ok {
		return x.Leaf
	}
	return nil
}

func (x *Node) GetBucketizedSplit() *BucketizedSplit {
	if x, ok := x.GetNode().(*Node_BucketizedSplit); ok {
		return x.BucketizedSplit
	}
	return nil
}

func (x *Node) GetCategoricalSplit() *CategoricalSplit {
	if x, ok := x.GetNode().(*Node_CategoricalSplit); ok {
		return x.CategoricalSplit
	}
	return nil
}

func (x *Node) GetDenseSplit() *DenseSplit {
	if x, ok := x.GetNode().(*Node_DenseSplit); ok {
		return x.DenseSplit
	}
	return nil
}

func (x *Node) GetMetadata() *NodeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type isNode_Node interface {
	isNode_Node()
}

type Node_Leaf struct {
	Leaf *Leaf `protobuf:"bytes,1,opt,name=leaf,proto3,oneof"`
}

type Node_BucketizedSplit struct {
	BucketizedSplit *BucketizedSplit `protobuf:"bytes,2,opt,name=bucketized_split,json=bucketizedSplit,proto3,oneof"`
}

type Node_CategoricalSplit struct {
	CategoricalSplit *CategoricalSplit `protobuf:"bytes,3,opt,name=categorical_split,json=categoricalSplit,proto3,oneof"`
}

type Node_DenseSplit struct {
	DenseSplit *DenseSplit `protobuf:"bytes,4,opt,name=dense_split,json=denseSplit,proto3,oneof"`
}

func (*Node_Leaf) isNode_Node() {}

func (*Node_BucketizedSplit) isNode_Node() {}

func (*Node_CategoricalSplit) isNode_Node() {}

func (*Node_DenseSplit) isNode_Node() {}

// NodeMetadata encodes metadata associated with each node in a tree.
type NodeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The gain associated with this node.
	Gain float32 `protobuf:"fixed32,1,opt,name=gain,proto3" json:"gain,omitempty"`
	// The original leaf node before this node was split.
	OriginalLeaf *Leaf `protobuf:"bytes,2,opt,name=original_leaf,json=originalLeaf,proto3" json:"original_leaf,omitempty"`
}

func (x *NodeMetadata) Reset() {
	*x = NodeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMetadata) ProtoMessage() {}

func (x *NodeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMetadata.ProtoReflect.Descriptor instead.
func (*NodeMetadata) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP(), []int{1}
}

func (x *NodeMetadata) GetGain() float32 {
	if x != nil {
		return x.Gain
	}
	return 0
}

func (x *NodeMetadata) GetOriginalLeaf() *Leaf {
	if x != nil {
		return x.OriginalLeaf
	}
	return nil
}

// Leaves can either hold dense or sparse information.
type Leaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Leaf:
	//	*Leaf_Vector
	//	*Leaf_SparseVector
	Leaf   isLeaf_Leaf `protobuf_oneof:"leaf"`
	Scalar float32     `protobuf:"fixed32,3,opt,name=scalar,proto3" json:"scalar,omitempty"`
}

func (x *Leaf) Reset() {
	*x = Leaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Leaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Leaf) ProtoMessage() {}

func (x *Leaf) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Leaf.ProtoReflect.Descriptor instead.
func (*Leaf) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP(), []int{2}
}

func (m *Leaf) GetLeaf() isLeaf_Leaf {
	if m != nil {
		return m.Leaf
	}
	return nil
}

func (x *Leaf) GetVector() *Vector {
	if x, ok := x.GetLeaf().(*Leaf_Vector); ok {
		return x.Vector
	}
	return nil
}

func (x *Leaf) GetSparseVector() *SparseVector {
	if x, ok := x.GetLeaf().(*Leaf_SparseVector); ok {
		return x.SparseVector
	}
	return nil
}

func (x *Leaf) GetScalar() float32 {
	if x != nil {
		return x.Scalar
	}
	return 0
}

type isLeaf_Leaf interface {
	isLeaf_Leaf()
}

type Leaf_Vector struct {
	// See third_party/tensorflow/contrib/decision_trees/
	// proto/generic_tree_model.proto
	// for a description of how vector and sparse_vector might be used.
	Vector *Vector `protobuf:"bytes,1,opt,name=vector,proto3,oneof"`
}

type Leaf_SparseVector struct {
	SparseVector *SparseVector `protobuf:"bytes,2,opt,name=sparse_vector,json=sparseVector,proto3,oneof"`
}

func (*Leaf_Vector) isLeaf_Leaf() {}

func (*Leaf_SparseVector) isLeaf_Leaf() {}

type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []float32 `protobuf:"fixed32,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP(), []int{3}
}

func (x *Vector) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type SparseVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index []int32   `protobuf:"varint,1,rep,packed,name=index,proto3" json:"index,omitempty"`
	Value []float32 `protobuf:"fixed32,2,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *SparseVector) Reset() {
	*x = SparseVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseVector) ProtoMessage() {}

func (x *SparseVector) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseVector.ProtoReflect.Descriptor instead.
func (*SparseVector) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP(), []int{4}
}

func (x *SparseVector) GetIndex() []int32 {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *SparseVector) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type BucketizedSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Float feature column and split threshold describing
	// the rule feature <= threshold.
	FeatureId int32 `protobuf:"varint,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	Threshold int32 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// Node children indexing into a contiguous
	// vector of nodes starting from the root.
	LeftId  int32 `protobuf:"varint,3,opt,name=left_id,json=leftId,proto3" json:"left_id,omitempty"`
	RightId int32 `protobuf:"varint,4,opt,name=right_id,json=rightId,proto3" json:"right_id,omitempty"`
}

func (x *BucketizedSplit) Reset() {
	*x = BucketizedSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketizedSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketizedSplit) ProtoMessage() {}

func (x *BucketizedSplit) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketizedSplit.ProtoReflect.Descriptor instead.
func (*BucketizedSplit) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP(), []int{5}
}

func (x *BucketizedSplit) GetFeatureId() int32 {
	if x != nil {
		return x.FeatureId
	}
	return 0
}

func (x *BucketizedSplit) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *BucketizedSplit) GetLeftId() int32 {
	if x != nil {
		return x.LeftId
	}
	return 0
}

func (x *BucketizedSplit) GetRightId() int32 {
	if x != nil {
		return x.RightId
	}
	return 0
}

type CategoricalSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Categorical feature column and split describing the rule feature value ==
	// value.
	FeatureId int32 `protobuf:"varint,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	Value     int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// Node children indexing into a contiguous
	// vector of nodes starting from the root.
	LeftId  int32 `protobuf:"varint,3,opt,name=left_id,json=leftId,proto3" json:"left_id,omitempty"`
	RightId int32 `protobuf:"varint,4,opt,name=right_id,json=rightId,proto3" json:"right_id,omitempty"`
}

func (x *CategoricalSplit) Reset() {
	*x = CategoricalSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoricalSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoricalSplit) ProtoMessage() {}

func (x *CategoricalSplit) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoricalSplit.ProtoReflect.Descriptor instead.
func (*CategoricalSplit) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP(), []int{6}
}

func (x *CategoricalSplit) GetFeatureId() int32 {
	if x != nil {
		return x.FeatureId
	}
	return 0
}

func (x *CategoricalSplit) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CategoricalSplit) GetLeftId() int32 {
	if x != nil {
		return x.LeftId
	}
	return 0
}

func (x *CategoricalSplit) GetRightId() int32 {
	if x != nil {
		return x.RightId
	}
	return 0
}

// TODO(nponomareva): move out of boosted_trees and rename to trees.proto
type DenseSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Float feature column and split threshold describing
	// the rule feature <= threshold.
	FeatureId int32   `protobuf:"varint,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	Threshold float32 `protobuf:"fixed32,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// Node children indexing into a contiguous
	// vector of nodes starting from the root.
	LeftId  int32 `protobuf:"varint,3,opt,name=left_id,json=leftId,proto3" json:"left_id,omitempty"`
	RightId int32 `protobuf:"varint,4,opt,name=right_id,json=rightId,proto3" json:"right_id,omitempty"`
}

func (x *DenseSplit) Reset() {
	*x = DenseSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DenseSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenseSplit) ProtoMessage() {}

func (x *DenseSplit) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenseSplit.ProtoReflect.Descriptor instead.
func (*DenseSplit) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP(), []int{7}
}

func (x *DenseSplit) GetFeatureId() int32 {
	if x != nil {
		return x.FeatureId
	}
	return 0
}

func (x *DenseSplit) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *DenseSplit) GetLeftId() int32 {
	if x != nil {
		return x.LeftId
	}
	return 0
}

func (x *DenseSplit) GetRightId() int32 {
	if x != nil {
		return x.RightId
	}
	return 0
}

// Tree describes a list of connected nodes.
// Node 0 must be the root and can carry any payload including a leaf
// in the case of representing the bias.
// Note that each node id is implicitly its index in the list of nodes.
type Tree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *Tree) Reset() {
	*x = Tree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree) ProtoMessage() {}

func (x *Tree) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree.ProtoReflect.Descriptor instead.
func (*Tree) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP(), []int{8}
}

func (x *Tree) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type TreeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of layers grown for this tree.
	NumLayersGrown int32 `protobuf:"varint,2,opt,name=num_layers_grown,json=numLayersGrown,proto3" json:"num_layers_grown,omitempty"`
	// Whether the tree is finalized in that no more layers can be grown.
	IsFinalized bool `protobuf:"varint,3,opt,name=is_finalized,json=isFinalized,proto3" json:"is_finalized,omitempty"`
	// If tree was finalized and post pruning happened, it is possible that cache
	// still refers to some nodes that were deleted or that the node ids changed
	// (e.g. node id 5 became node id 2 due to pruning of the other branch).
	// The mapping below allows us to understand where the old ids now map to and
	// how the values should be adjusted due to post-pruning.
	// The size of the list should be equal to the number of nodes in the tree
	// before post-pruning happened.
	// If the node was pruned, it will have new_node_id equal to the id of a node
	// that this node was collapsed into. For a node that didn't get pruned, it is
	// possible that its id still changed, so new_node_id will have the
	// corresponding id in the pruned tree.
	// If post-pruning didn't happen, or it did and it had no effect (e.g. no
	// nodes got pruned), this list will be empty.
	PostPrunedNodesMeta []*TreeMetadata_PostPruneNodeUpdate `protobuf:"bytes,4,rep,name=post_pruned_nodes_meta,json=postPrunedNodesMeta,proto3" json:"post_pruned_nodes_meta,omitempty"`
}

func (x *TreeMetadata) Reset() {
	*x = TreeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeMetadata) ProtoMessage() {}

func (x *TreeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeMetadata.ProtoReflect.Descriptor instead.
func (*TreeMetadata) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP(), []int{9}
}

func (x *TreeMetadata) GetNumLayersGrown() int32 {
	if x != nil {
		return x.NumLayersGrown
	}
	return 0
}

func (x *TreeMetadata) GetIsFinalized() bool {
	if x != nil {
		return x.IsFinalized
	}
	return false
}

func (x *TreeMetadata) GetPostPrunedNodesMeta() []*TreeMetadata_PostPruneNodeUpdate {
	if x != nil {
		return x.PostPrunedNodesMeta
	}
	return nil
}

type GrowingMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of trees that we have attempted to build. After pruning, these
	// trees might have been removed.
	NumTreesAttempted int64 `protobuf:"varint,1,opt,name=num_trees_attempted,json=numTreesAttempted,proto3" json:"num_trees_attempted,omitempty"`
	// Number of layers that we have attempted to build. After pruning, these
	// layers might have been removed.
	NumLayersAttempted int64 `protobuf:"varint,2,opt,name=num_layers_attempted,json=numLayersAttempted,proto3" json:"num_layers_attempted,omitempty"`
	// The start (inclusive) and end (exclusive) ids of the nodes in the latest
	// layer of the latest tree.
	LastLayerNodeStart int32 `protobuf:"varint,3,opt,name=last_layer_node_start,json=lastLayerNodeStart,proto3" json:"last_layer_node_start,omitempty"`
	LastLayerNodeEnd   int32 `protobuf:"varint,4,opt,name=last_layer_node_end,json=lastLayerNodeEnd,proto3" json:"last_layer_node_end,omitempty"`
}

func (x *GrowingMetadata) Reset() {
	*x = GrowingMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowingMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowingMetadata) ProtoMessage() {}

func (x *GrowingMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowingMetadata.ProtoReflect.Descriptor instead.
func (*GrowingMetadata) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP(), []int{10}
}

func (x *GrowingMetadata) GetNumTreesAttempted() int64 {
	if x != nil {
		return x.NumTreesAttempted
	}
	return 0
}

func (x *GrowingMetadata) GetNumLayersAttempted() int64 {
	if x != nil {
		return x.NumLayersAttempted
	}
	return 0
}

func (x *GrowingMetadata) GetLastLayerNodeStart() int32 {
	if x != nil {
		return x.LastLayerNodeStart
	}
	return 0
}

func (x *GrowingMetadata) GetLastLayerNodeEnd() int32 {
	if x != nil {
		return x.LastLayerNodeEnd
	}
	return 0
}

// TreeEnsemble describes an ensemble of decision trees.
type TreeEnsemble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trees        []*Tree         `protobuf:"bytes,1,rep,name=trees,proto3" json:"trees,omitempty"`
	TreeWeights  []float32       `protobuf:"fixed32,2,rep,packed,name=tree_weights,json=treeWeights,proto3" json:"tree_weights,omitempty"`
	TreeMetadata []*TreeMetadata `protobuf:"bytes,3,rep,name=tree_metadata,json=treeMetadata,proto3" json:"tree_metadata,omitempty"`
	// Metadata that is used during the training.
	GrowingMetadata *GrowingMetadata `protobuf:"bytes,4,opt,name=growing_metadata,json=growingMetadata,proto3" json:"growing_metadata,omitempty"`
}

func (x *TreeEnsemble) Reset() {
	*x = TreeEnsemble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeEnsemble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeEnsemble) ProtoMessage() {}

func (x *TreeEnsemble) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeEnsemble.ProtoReflect.Descriptor instead.
func (*TreeEnsemble) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP(), []int{11}
}

func (x *TreeEnsemble) GetTrees() []*Tree {
	if x != nil {
		return x.Trees
	}
	return nil
}

func (x *TreeEnsemble) GetTreeWeights() []float32 {
	if x != nil {
		return x.TreeWeights
	}
	return nil
}

func (x *TreeEnsemble) GetTreeMetadata() []*TreeMetadata {
	if x != nil {
		return x.TreeMetadata
	}
	return nil
}

func (x *TreeEnsemble) GetGrowingMetadata() *GrowingMetadata {
	if x != nil {
		return x.GrowingMetadata
	}
	return nil
}

// DebugOutput contains outputs useful for debugging/model interpretation, at
// the individual example-level. Debug outputs that are available to the user
// are: 1) Directional feature contributions (DFCs) 2) Node IDs for ensemble
// prediction path 3) Leaf node IDs.
type DebugOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return the logits and associated feature splits across prediction paths for
	// each tree, for every example, at predict time. We will use these values to
	// compute DFCs in Python, by subtracting each child prediction from its
	// parent prediction and associating this change with its respective feature
	// id.
	FeatureIds []int32   `protobuf:"varint,1,rep,packed,name=feature_ids,json=featureIds,proto3" json:"feature_ids,omitempty"`
	LogitsPath []float32 `protobuf:"fixed32,2,rep,packed,name=logits_path,json=logitsPath,proto3" json:"logits_path,omitempty"`
}

func (x *DebugOutput) Reset() {
	*x = DebugOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugOutput) ProtoMessage() {}

func (x *DebugOutput) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugOutput.ProtoReflect.Descriptor instead.
func (*DebugOutput) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP(), []int{12}
}

func (x *DebugOutput) GetFeatureIds() []int32 {
	if x != nil {
		return x.FeatureIds
	}
	return nil
}

func (x *DebugOutput) GetLogitsPath() []float32 {
	if x != nil {
		return x.LogitsPath
	}
	return nil
}

type TreeMetadata_PostPruneNodeUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewNodeId   int32   `protobuf:"varint,1,opt,name=new_node_id,json=newNodeId,proto3" json:"new_node_id,omitempty"`
	LogitChange float32 `protobuf:"fixed32,2,opt,name=logit_change,json=logitChange,proto3" json:"logit_change,omitempty"`
}

func (x *TreeMetadata_PostPruneNodeUpdate) Reset() {
	*x = TreeMetadata_PostPruneNodeUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeMetadata_PostPruneNodeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeMetadata_PostPruneNodeUpdate) ProtoMessage() {}

func (x *TreeMetadata_PostPruneNodeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeMetadata_PostPruneNodeUpdate.ProtoReflect.Descriptor instead.
func (*TreeMetadata_PostPruneNodeUpdate) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP(), []int{9, 0}
}

func (x *TreeMetadata_PostPruneNodeUpdate) GetNewNodeId() int32 {
	if x != nil {
		return x.NewNodeId
	}
	return 0
}

func (x *TreeMetadata_PostPruneNodeUpdate) GetLogitChange() float32 {
	if x != nil {
		return x.LogitChange
	}
	return 0
}

var File_tensorflow_core_kernels_boosted_trees_boosted_trees_proto protoreflect.FileDescriptor

var file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDesc = []byte{
	0x0a, 0x39, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x2f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x73, 0x22, 0x85, 0x03, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x66, 0x48, 0x00, 0x52, 0x04,
	0x6c, 0x65, 0x61, 0x66, 0x12, 0x56, 0x0a, 0x10, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x69, 0x7a, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x59, 0x0a, 0x11,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x12, 0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x89, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a,
	0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x67, 0x61, 0x69,
	0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65,
	0x61, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x65, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x4c, 0x65, 0x61, 0x66, 0x22, 0xb1, 0x01, 0x0a, 0x04, 0x4c, 0x65, 0x61, 0x66, 0x12,
	0x3a, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x62, 0x6f, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x0d, 0x73,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x2e, 0x53, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x22, 0x1e, 0x0a, 0x06, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x0c, 0x53, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x66, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x10, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x66, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x0a, 0x44, 0x65, 0x6e, 0x73,
	0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x66, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x04, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x34, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xa6, 0x02, 0x0a, 0x0c, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x16, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x75, 0x6e,
	0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x2e, 0x54,
	0x72, 0x65, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x13, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x1a, 0x58, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x75, 0x6e,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6e,
	0x65, 0x77, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x6f, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xd5,
	0x01, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x65, 0x65, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x6e, 0x75, 0x6d, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x0c, 0x54, 0x72, 0x65, 0x65, 0x45,
	0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x72, 0x65, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x05, 0x74, 0x72, 0x65, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x65, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x12, 0x4b, 0x0a, 0x0d, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0c, 0x74, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a,
	0x10, 0x67, 0x72, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x0b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x74, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x42, 0x65, 0x0a, 0x18, 0x6f, 0x72, 0x67, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x42, 0x12, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x30, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x73, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescOnce sync.Once
	file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescData = file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDesc
)

func file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescGZIP() []byte {
	file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescData)
	})
	return file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDescData
}

var file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_goTypes = []interface{}{
	(*Node)(nil),                             // 0: tensorflow.boosted_trees.Node
	(*NodeMetadata)(nil),                     // 1: tensorflow.boosted_trees.NodeMetadata
	(*Leaf)(nil),                             // 2: tensorflow.boosted_trees.Leaf
	(*Vector)(nil),                           // 3: tensorflow.boosted_trees.Vector
	(*SparseVector)(nil),                     // 4: tensorflow.boosted_trees.SparseVector
	(*BucketizedSplit)(nil),                  // 5: tensorflow.boosted_trees.BucketizedSplit
	(*CategoricalSplit)(nil),                 // 6: tensorflow.boosted_trees.CategoricalSplit
	(*DenseSplit)(nil),                       // 7: tensorflow.boosted_trees.DenseSplit
	(*Tree)(nil),                             // 8: tensorflow.boosted_trees.Tree
	(*TreeMetadata)(nil),                     // 9: tensorflow.boosted_trees.TreeMetadata
	(*GrowingMetadata)(nil),                  // 10: tensorflow.boosted_trees.GrowingMetadata
	(*TreeEnsemble)(nil),                     // 11: tensorflow.boosted_trees.TreeEnsemble
	(*DebugOutput)(nil),                      // 12: tensorflow.boosted_trees.DebugOutput
	(*TreeMetadata_PostPruneNodeUpdate)(nil), // 13: tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate
}
var file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_depIdxs = []int32{
	2,  // 0: tensorflow.boosted_trees.Node.leaf:type_name -> tensorflow.boosted_trees.Leaf
	5,  // 1: tensorflow.boosted_trees.Node.bucketized_split:type_name -> tensorflow.boosted_trees.BucketizedSplit
	6,  // 2: tensorflow.boosted_trees.Node.categorical_split:type_name -> tensorflow.boosted_trees.CategoricalSplit
	7,  // 3: tensorflow.boosted_trees.Node.dense_split:type_name -> tensorflow.boosted_trees.DenseSplit
	1,  // 4: tensorflow.boosted_trees.Node.metadata:type_name -> tensorflow.boosted_trees.NodeMetadata
	2,  // 5: tensorflow.boosted_trees.NodeMetadata.original_leaf:type_name -> tensorflow.boosted_trees.Leaf
	3,  // 6: tensorflow.boosted_trees.Leaf.vector:type_name -> tensorflow.boosted_trees.Vector
	4,  // 7: tensorflow.boosted_trees.Leaf.sparse_vector:type_name -> tensorflow.boosted_trees.SparseVector
	0,  // 8: tensorflow.boosted_trees.Tree.nodes:type_name -> tensorflow.boosted_trees.Node
	13, // 9: tensorflow.boosted_trees.TreeMetadata.post_pruned_nodes_meta:type_name -> tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate
	8,  // 10: tensorflow.boosted_trees.TreeEnsemble.trees:type_name -> tensorflow.boosted_trees.Tree
	9,  // 11: tensorflow.boosted_trees.TreeEnsemble.tree_metadata:type_name -> tensorflow.boosted_trees.TreeMetadata
	10, // 12: tensorflow.boosted_trees.TreeEnsemble.growing_metadata:type_name -> tensorflow.boosted_trees.GrowingMetadata
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_init() }
func file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_init() {
	if File_tensorflow_core_kernels_boosted_trees_boosted_trees_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Leaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparseVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketizedSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoricalSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DenseSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrowingMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeEnsemble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeMetadata_PostPruneNodeUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Node_Leaf)(nil),
		(*Node_BucketizedSplit)(nil),
		(*Node_CategoricalSplit)(nil),
		(*Node_DenseSplit)(nil),
	}
	file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Leaf_Vector)(nil),
		(*Leaf_SparseVector)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_msgTypes,
	}.Build()
	File_tensorflow_core_kernels_boosted_trees_boosted_trees_proto = out.File
	file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_rawDesc = nil
	file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_goTypes = nil
	file_tensorflow_core_kernels_boosted_trees_boosted_trees_proto_depIdxs = nil
}
